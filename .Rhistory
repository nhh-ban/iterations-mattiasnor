demo()
data_vector <- c(2, 5, 7, 8, 9, 10)
print(data_vector)
mean_value <- mean(data_vector)
print(mean_value)
median_value <- mean(data_vector)
print(median_value)
median_value <- median(data_vector)
print(median_value)
plot(data_vector, main = "Simple R Plot", xlab = "Index", ylab = "Value")
library(dplyr)
library(tidyr)
install.packages(tidyr)
library(tidyr)
library(readxl)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
sales <- read_excel("data-geilo.xlsl", sheet = "Sales")
df %>%
map(
{
\(x) mean(x) / sd(x)
}
) %>%
bind_cols()
df |>
map(
{
\(x) mean(x) / sd(x)
}
) |>
bind_cols()
#Creating a dataframe with means
df %>%
map(mean, trim = .1) %>%
bind_cols()
library(purrr)
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = rnorm(10),
)
df %>%
map(
{
\(x) mean(x) / sd(x)
}
) %>%
bind_cols()
mtcars
mtcars %>%
split( ~ cyl)
mtcars %>%
split( ~ cyl) %>%
map({
\(x)lm(mpg ~ wt, data = x)
})
mtcars %>%
split( ~ cyl) %>%
map({
\(x)lm(mpg ~ wt, data = x)
}) %>%
map(summary)
mtcars %>%
split( ~ cyl) %>%
map({
\(x)lm(mpg ~ wt, data = x)
}) %>%
map(summary) %>%
map({
\(x) x$r.squared
}) %>%
bind_cols()
mtcars %>%
split(~cyl) %>%
map({
\(x)lm(mpg ~ wt, data = x)
}) %>%
map(summary) %>%
map("r.squared") %>%
bind_cols()
#Mapping 2 lists
mu    <- list(-10000, 0, 100)
sigma <- list(     1, 5,  10)
n     <- list(     1, 10, 25)
list(mean = mu,
sd = sigma,
n = n) |>
pmap(rnorm)
library(purrr)
library(tidyverse)
list(mean = mu,
sd = sigma,
n = n) |>
pmap(rnorm)
ibrary(httr)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
install.packages("anytime")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
GQL <- function(query,
...,
.token = NULL,
.variables = NULL,
.operationName = NULL,
.url = url) {
pbody <-
list(query = query,
variables = .variables,
operationName = .operationName)
if (is.null(.token)) {
res <- POST(.url, body = pbody, encode = "json", ...)
} else {
auth_header <- paste("bearer", .token)
res <-
POST(
.url,
body = pbody,
encode = "json",
add_headers(Authorization = auth_header),
...
)
}
res <- content(res, as = "parsed", encoding = "UTF-8")
if (!is.null(res$errors)) {
warning(toJSON(res$errors))
}
res$data
}
# The URL we will use is stored below:
url <- "https://www.vegvesen.no/trafikkdata/api/"
# Let's figure out which sensor stations that are operable.
# The query below extracts all the stations, with a date for
# when the station was in operation as well as a long/latitude.
qry <-
'
{
trafficRegistrationPoints {
id
name
latestData {
volumeByDay
}
location {
coordinates {
latLon {
lat
lon
}
}
}
}
}
'
# Allright - let's try submitting the query:
stations <-GQL(qry)
head(stations)
View(stations)
length(stations)
length(stations[[1]])
#Getting the first entry
staions[[1]][[1]]
#Getting the first entry
stations[[1]][[1]]
#Store it as a data frame
stations[[1]][[1]] %>%
as_tibble()
#Creating data frame for whole dataset
staions[[1]] %>%
map(as_tibble) %>%
list_rbind()
#Creating data frame for whole dataset
stations[[1]] %>%
map(as_tibble) %>%
list_rbind()
#Creating data frame for whole dataset
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
select(latestData) %>%
pull
#Mutate to character format
unlist_safe <-
function(x){
x <- unlist(x)
if(is.null(x)){
return(NA_character_)
}else{
return(x)
}
}
stations[[1]] |>
map(as_tibble) |>
list_rbind() |>
mutate(latestData = map_chr(latestData, unlist_safe))
#Finalized
stations[[1]] |>
map(as_tibble) |>
list_rbind() |>
mutate(latestData = map_chr(latestData, 1, .default = ""))  |>
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin"))  |>
mutate(location = map(location, unlist)) |>
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
) %>%
select(-location)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
setwd("C:/Users/matti/iCloudDrive/Skole/NHH/Master/1 semester/BAN400/Assignments/Assignment 6/iterations-mattiasnor")
getwd()
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
rm(list = ls())
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
